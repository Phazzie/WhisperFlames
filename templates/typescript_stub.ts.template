/**
 * ═══════════════════════════════════════════════════════════════════════════════
 * {{seamName}} - Auto-Generated Seam Stub
 * ═══════════════════════════════════════════════════════════════════════════════
 * 
 * 🔥 GENERATED CODE - READ THIS FIRST! 🔥
 * 
 * This file was automatically generated from a Seam-Driven Development (SDD) 
 * contract and should NOT be edited manually. Any manual changes will be lost 
 * when the contract is regenerated.
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * GENERATION DETAILS
 * ─────────────────────────────────────────────────────────────────────────────
 * Generated: {{timestamp}}
 * Contract:  {{contractFile}}
 * Version:   {{version}}
 * Category:  {{category}}
 * Generator: SDD Generator v{{generatorVersion}}
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * SEAM PURPOSE
 * ─────────────────────────────────────────────────────────────────────────────
 * {{description}}
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * QUICK START
 * ─────────────────────────────────────────────────────────────────────────────
 * 1. Extend {{seamName}}SeamBase to create your implementation
 * 2. Implement the abstract process() method
 * 3. Use create{{seamName}}Seam() factory for dependency injection
 * 4. See the blueprint (blueprints/{{seamName}}.md) for detailed guide
 * 
 * Example:
 *   class My{{seamName}} extends {{seamName}}SeamBase {
 *     async process(input: {{seamName}}Input): Promise<{{seamName}}Response> {
 *       // Your implementation here
 *       return this.createSuccessResponse(result);
 *     }
 *   }
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * CONTRACT COMPLIANCE
 * ─────────────────────────────────────────────────────────────────────────────
 * This seam MUST:
 * ✅ Accept inputs matching {{seamName}}Input interface
 * ✅ Return responses matching {{seamName}}Response type
 * ✅ Handle ALL error types defined in the contract
 * ✅ Validate inputs using validateInput() method
 * ✅ Follow the success/error response pattern
 * 
 * Error Types: {{#errorTypes}}{{name}} ({{code}}){{#hasNext}}, {{/hasNext}}{{/errorTypes}}
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * DEPENDENCIES
 * ─────────────────────────────────────────────────────────────────────────────
 * {{#dependencies}}
 * - {{seamName}} ({{version}}) - {{type}}
 * {{/dependencies}}
 * {{^dependencies}}
 * ✅ No external seam dependencies
 * {{/dependencies}}
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * MODIFICATION POLICY
 * ─────────────────────────────────────────────────────────────────────────────
 * ❌ DO NOT edit this file manually
 * ✅ Update the contract ({{contractFile}}) and regenerate
 * ⚠️  If manual edits are absolutely necessary, add this trailer to your commit:
 *    
 *    Manual-Patch: {{seamName}}
 *    
 *    This enables two-strike regeneration logic for future updates.
 * 
 * ─────────────────────────────────────────────────────────────────────────────
 * RELATED FILES
 * ─────────────────────────────────────────────────────────────────────────────
 * 📋 Contract:    {{contractFile}}
 * 📖 Blueprint:   blueprints/{{seamName}}.md
 * 🧪 Tests:       tests/{{seamName}}.spec.ts
 * 🔧 Generated:   {{timestamp}}
 * 
 * ═══════════════════════════════════════════════════════════════════════════════
 */

{{#imports}}
import { {{types}} } from '{{module}}';
{{/imports}}

// Input/Output Type Definitions
{{#inputProperties}}
export interface {{seamName}}{{propertyName}}Input {
{{#properties}}
  {{name}}{{#optional}}?{{/optional}}: {{type}};{{#description}} // {{description}}{{/description}}
{{/properties}}
}
{{/inputProperties}}

{{#outputProperties}}
export interface {{seamName}}{{propertyName}}Output {
{{#properties}}
  {{name}}{{#optional}}?{{/optional}}: {{type}};{{#description}} // {{description}}{{/description}}
{{/properties}}
}
{{/outputProperties}}

// Standard SDD Response Types
export interface {{seamName}}SuccessResponse {
  ok: true;
  data: {{seamName}}Output;
}

export interface {{seamName}}ErrorResponse {
  ok: false;
  errors: Array<{
    code: string;
    message: string;
    details?: Record<string, unknown>;
  }>;
}

export type {{seamName}}Response = {{seamName}}SuccessResponse | {{seamName}}ErrorResponse;

// Error Type Definitions
{{#errorTypes}}
export class {{seamName}}{{name}}Error extends Error {
  public readonly code = '{{code}}';
  public readonly httpStatus = {{httpStatus}};
  public readonly retryable = {{retryable}};
  
  constructor(message: string, public readonly details?: Record<string, unknown>) {
    super(message);
    this.name = '{{seamName}}{{name}}Error';
  }
}
{{/errorTypes}}

// Main Seam Interface
export interface I{{seamName}}Seam {
  /**
   * {{description}}
   * 
   * @param input - {{inputDescription}}
   * @returns Promise<{{seamName}}Response>
   * 
   * @throws {{seamName}}ValidationError - {{validationErrorDescription}}
   * @throws {{seamName}}ProcessingError - {{processingErrorDescription}}
   */
  process(input: {{seamName}}Input): Promise<{{seamName}}Response>;
  
  /**
   * Validate input without processing
   * @param input - Input to validate
   * @returns True if valid, throws error if invalid
   */
  validateInput(input: unknown): input is {{seamName}}Input;
  
  /**
   * Get seam metadata
   * @returns Seam contract information
   */
  getMetadata(): {
    name: string;
    version: string;
    category: string;
    dependencies: string[];
  };
}

// Implementation Class (to be extended)
export abstract class {{seamName}}SeamBase implements I{{seamName}}Seam {
  protected readonly metadata = {
    name: '{{seamName}}',
    version: '{{version}}',
    category: '{{category}}',
    dependencies: [{{#dependencies}}'{{seamName}}'{{#hasNext}}, {{/hasNext}}{{/dependencies}}],
  };

  abstract process(input: {{seamName}}Input): Promise<{{seamName}}Response>;

  validateInput(input: unknown): input is {{seamName}}Input {
    // TODO: Implement JSON Schema validation
    // This should validate against the contract schema
    return typeof input === 'object' && input !== null;
  }

  getMetadata() {
    return this.metadata;
  }

  /**
   * Helper method to create success response
   */
  protected createSuccessResponse(data: {{seamName}}Output): {{seamName}}SuccessResponse {
    return { ok: true, data };
  }

  /**
   * Helper method to create error response
   */
  protected createErrorResponse(errors: Array<{code: string, message: string, details?: Record<string, unknown>}>): {{seamName}}ErrorResponse {
    return { ok: false, errors };
  }
}

// Factory function for creating implementations
export function create{{seamName}}Seam(implementation?: Partial<I{{seamName}}Seam>): I{{seamName}}Seam {
  if (implementation) {
    return implementation as I{{seamName}}Seam;
  }
  
  // Return default implementation that throws
  return new (class extends {{seamName}}SeamBase {
    async process(input: {{seamName}}Input): Promise<{{seamName}}Response> {
      throw new Error(`{{seamName}}Seam not implemented. Please provide an implementation.`);
    }
  })();
}

// Example usage (for documentation)
export const {{seamName}}Example = {
  // Success example from contract
  successExample: {
    input: {{successExampleInput}},
    expectedOutput: {{successExampleOutput}}
  },
  
  // Error examples from contract
  errorExamples: [
{{#errorExamples}}
    {
      name: '{{name}}',
      input: {{inputData}},
      expectedError: '{{errorCode}}'
    }{{#hasNext}},{{/hasNext}}
{{/errorExamples}}
  ]
};

// Type guards
export function isSuccessResponse(response: {{seamName}}Response): response is {{seamName}}SuccessResponse {
  return response.ok === true;
}

export function isErrorResponse(response: {{seamName}}Response): response is {{seamName}}ErrorResponse {
  return response.ok === false;
}

// Contract reference for debugging
export const {{seamName}}Contract = {
  file: '{{contractFile}}',
  version: '{{version}}',
  lastGenerated: '{{timestamp}}'
};
